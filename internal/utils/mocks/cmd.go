// Code generated by MockGen. DO NOT EDIT.
// Source: internal/utils/cmd.go
//
// Generated by this command:
//
//	mockgen -source=internal/utils/cmd.go -destination=internal/utils/mocks/cmd.go -package=utils
//

// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommandRunner is a mock of CommandRunner interface.
type MockCommandRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCommandRunnerMockRecorder
	isgomock struct{}
}

// MockCommandRunnerMockRecorder is the mock recorder for MockCommandRunner.
type MockCommandRunnerMockRecorder struct {
	mock *MockCommandRunner
}

// NewMockCommandRunner creates a new mock instance.
func NewMockCommandRunner(ctrl *gomock.Controller) *MockCommandRunner {
	mock := &MockCommandRunner{ctrl: ctrl}
	mock.recorder = &MockCommandRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandRunner) EXPECT() *MockCommandRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockCommandRunner) Run(command string, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{command}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCommandRunnerMockRecorder) Run(command any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{command}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCommandRunner)(nil).Run), varargs...)
}

// RunInDir mocks base method.
func (m *MockCommandRunner) RunInDir(dir, command string, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{dir, command}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunInDir", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInDir indicates an expected call of RunInDir.
func (mr *MockCommandRunnerMockRecorder) RunInDir(dir, command any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{dir, command}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInDir", reflect.TypeOf((*MockCommandRunner)(nil).RunInDir), varargs...)
}
